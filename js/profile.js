// –ú–æ–¥—É–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–º
const ProfileManager = {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    init() {
        ConfigUtils.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–º');
        this.loadProfile();
    },

    // –ó–∞–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
    loadProfile() {
        const container = document.getElementById('profile-content');
        if (!container) {
            ConfigUtils.log('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä profile-content –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        const currentUser = AuthSystem.getCurrentUser();
        if (!currentUser) {
            container.innerHTML = '<p>–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω</p>';
            return;
        }

        container.innerHTML = this.createProfileHTML(currentUser);
        ConfigUtils.log('–ü—Ä–æ—Ñ–∏–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω');
    },

    // –°–æ–∑–¥–∞—Ç—å HTML –ø—Ä–æ—Ñ–∏–ª—è
    createProfileHTML(user) {
        const isClient = user.role === CONFIG.USER_ROLES.CLIENT;
        const isTarot = user.role === CONFIG.USER_ROLES.TAROT;

        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const stats = this.getUserStatistics(user);

        return `
            <div class="profile-container">
                <div class="profile-header">
                    <div class="profile-avatar">
                        ${user.photoUrl ?
                            `<img src="${user.photoUrl}" alt="–ê–≤–∞—Ç–∞—Ä" class="avatar-image">` :
                            `<div class="avatar-placeholder">${this.getInitials(user.firstName, user.lastName)}</div>`
                        }
                    </div>
                    <div class="profile-info">
                        <h2>${user.firstName} ${user.lastName || ''}</h2>
                        <p class="profile-role">${isTarot ? '–¢–∞—Ä–æ–ª–æ–≥' : '–ö–ª–∏–µ–Ω—Ç'}</p>
                        ${user.username ? `<p class="profile-username">@${user.username}</p>` : ''}
                    </div>
                </div>

                <div class="profile-stats">
                    <h3>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</h3>
                    <div class="stats-grid">
                        ${this.createStatsHTML(stats, user.role)}
                    </div>
                </div>

                <div class="profile-info-section">
                    <h3>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ñ–∏–ª–µ</h3>
                    <div class="info-grid">
                        <div class="info-item">
                            <span class="info-label">ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:</span>
                            <span class="info-value">${user.id}</span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Telegram ID:</span>
                            <span class="info-value">${user.telegramId || user.id}</span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">–Ø–∑—ã–∫:</span>
                            <span class="info-value">${user.languageCode || 'ru'}</span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Telegram Premium:</span>
                            <span class="info-value">${user.isPremium ? '–î–∞' : '–ù–µ—Ç'}</span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</span>
                            <span class="info-value">${new Date(user.registeredAt).toLocaleDateString('ru-RU')}</span>
                        </div>
                    </div>
                </div>

                ${isTarot ? this.createTarotSettingsHTML() : ''}

                <div class="profile-actions">
                    <h3>–î–µ–π—Å—Ç–≤–∏—è</h3>
                    <div class="actions-grid">
                        <button onclick="ProfileManager.editProfile()" class="action-btn">
                            ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
                        </button>
                        <button onclick="ProfileManager.exportData()" class="action-btn">
                            üì• –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
                        </button>
                        <button onclick="ProfileManager.clearData()" class="action-btn danger">
                            üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
                        </button>
                        <button onclick="AuthSystem.logout()" class="action-btn danger">
                            üö™ –í—ã–π—Ç–∏ –∏–∑ –∞–∫–∫–∞—É–Ω—Ç–∞
                        </button>
                    </div>
                </div>

                <div class="profile-debug">
                    <h3>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏</h3>
                    <div class="debug-info">
                        <div class="debug-item">
                            <span class="debug-label">–í–µ—Ä—Å–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:</span>
                            <span class="debug-value">${CONFIG.VERSION}</span>
                        </div>
                        <div class="debug-item">
                            <span class="debug-label">–†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:</span>
                            <span class="debug-value">${CONFIG.DEV_MODE ? '–í–∫–ª—é—á–µ–Ω' : '–í—ã–∫–ª—é—á–µ–Ω'}</span>
                        </div>
                        <div class="debug-item">
                            <span class="debug-label">–ü–æ–¥–¥–µ—Ä–∂–∫–∞ Telegram:</span>
                            <span class="debug-value">${ConfigUtils.isTelegramApp() ? '–î–∞' : '–ù–µ—Ç'}</span>
                        </div>
                        <div class="debug-item">
                            <span class="debug-label">–†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö:</span>
                            <span class="debug-value">${Storage.getStorageSize()} —Å–∏–º–≤–æ–ª–æ–≤</span>
                        </div>
                    </div>
                </div>
            </div>
        `;
    },

    // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω–∏—Ü–∏–∞–ª—ã
    getInitials(firstName, lastName) {
        const first = firstName ? firstName.charAt(0).toUpperCase() : '';
        const last = lastName ? lastName.charAt(0).toUpperCase() : '';
        return first + last || '?';
    },

    // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    getUserStatistics(user) {
        const isClient = user.role === CONFIG.USER_ROLES.CLIENT;

        if (isClient) {
            const bookings = BookingStorage.getUserBookings(user.id);
            const referrals = ReferralStorage.getUserReferrals(user.id);

            return {
                totalBookings: bookings.length,
                completedBookings: bookings.filter(b => b.status === CONFIG.BOOKING_STATUS.COMPLETED).length,
                pendingBookings: bookings.filter(b => b.status === CONFIG.BOOKING_STATUS.PENDING).length,
                referrals: referrals.length
            };
        } else {
            // –î–ª—è —Ç–∞—Ä–æ–ª–æ–≥–æ–≤
            const allBookings = BookingStorage.getAll(); // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ tarotId
            const slots = TimeSlotStorage.getAll();
            const referrals = ReferralStorage.getUserReferrals(user.id);

            return {
                totalClients: allBookings.length,
                completedSessions: allBookings.filter(b => b.status === CONFIG.BOOKING_STATUS.COMPLETED).length,
                activeSlots: slots.filter(s => s.status === CONFIG.SLOT_STATUS.AVAILABLE).length,
                referrals: referrals.length
            };
        }
    },

    // –°–æ–∑–¥–∞—Ç—å HTML —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    createStatsHTML(stats, userRole) {
        const isClient = userRole === CONFIG.USER_ROLES.CLIENT;

        if (isClient) {
            return `
                <div class="stat-item">
                    <div class="stat-number">${stats.totalBookings}</div>
                    <div class="stat-label">–í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number">${stats.completedBookings}</div>
                    <div class="stat-label">–ó–∞–≤–µ—Ä—à–µ–Ω–æ</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number">${stats.pendingBookings}</div>
                    <div class="stat-label">–û–∂–∏–¥–∞–µ—Ç</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number">${stats.referrals}</div>
                    <div class="stat-label">–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ</div>
                </div>
            `;
        } else {
            return `
                <div class="stat-item">
                    <div class="stat-number">${stats.totalClients}</div>
                    <div class="stat-label">–í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number">${stats.completedSessions}</div>
                    <div class="stat-label">–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–π</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number">${stats.activeSlots}</div>
                    <div class="stat-label">–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number">${stats.referrals}</div>
                    <div class="stat-label">–ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ</div>
                </div>
            `;
        }
    },

    // –°–æ–∑–¥–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞—Ä–æ–ª–æ–≥–∞
    createTarotSettingsHTML() {
        return `
            <div class="tarot-settings">
                <h3>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞—Ä–æ–ª–æ–≥–∞</h3>
                <div class="settings-grid">
                    <div class="setting-item">
                        <label>–°—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ (‚ÇΩ):</label>
                        <input type="number" id="consultation-price" value="2000" min="100" max="50000">
                    </div>
                    <div class="setting-item">
                        <label>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ (–º–∏–Ω):</label>
                        <select id="consultation-duration">
                            <option value="30">30 –º–∏–Ω—É—Ç</option>
                            <option value="60" selected>60 –º–∏–Ω—É—Ç</option>
                            <option value="90">90 –º–∏–Ω—É—Ç</option>
                        </select>
                    </div>
                    <div class="setting-item">
                        <label>–û–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥:</label>
                        <textarea id="service-description" placeholder="–û–ø–∏—à–∏—Ç–µ —Å–≤–æ–∏ —É—Å–ª—É–≥–∏..." rows="3"></textarea>
                    </div>
                    <div class="setting-item">
                        <label>–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</label>
                        <input type="text" id="contact-info" placeholder="Telegram, WhatsApp, email...">
                    </div>
                </div>
                <button onclick="ProfileManager.saveTarotSettings()" class="primary-btn">
                    –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
                </button>
            </div>
        `;
    },

    // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
    editProfile() {
        const currentUser = AuthSystem.getCurrentUser();
        if (!currentUser) return;

        const modal = Modal.create({
            title: '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å',
            content: `
                <div class="form-group">
                    <label>–ò–º—è:</label>
                    <input type="text" id="edit-first-name" value="${currentUser.firstName}">
                </div>
                <div class="form-group">
                    <label>–§–∞–º–∏–ª–∏—è:</label>
                    <input type="text" id="edit-last-name" value="${currentUser.lastName || ''}">
                </div>
                <div class="form-group">
                    <label>Username (–±–µ–∑ @):</label>
                    <input type="text" id="edit-username" value="${currentUser.username || ''}">
                </div>
            `,
            buttons: [
                {
                    text: '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å',
                    action: () => this.saveProfileChanges(),
                    primary: true
                },
                {
                    text: '–û—Ç–º–µ–Ω–∞',
                    action: () => Modal.close()
                }
            ]
        });

        Modal.show(modal);
    },

    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
    saveProfileChanges() {
        const firstName = document.getElementById('edit-first-name')?.value?.trim();
        const lastName = document.getElementById('edit-last-name')?.value?.trim();
        const username = document.getElementById('edit-username')?.value?.trim();

        if (!firstName) {
            TelegramApp.showAlert('–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è');
            return;
        }

        const updates = {
            firstName,
            lastName,
            username,
            updatedAt: new Date().toISOString()
        };

        AuthSystem.updateUser(updates);
        TelegramApp.showAlert('–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω!');
        Components.showNotification('–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω', 'success');
        TelegramApp.hapticFeedback('success');

        Modal.close();
        this.loadProfile();
    },

    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞—Ä–æ–ª–æ–≥–∞
    saveTarotSettings() {
        const price = document.getElementById('consultation-price')?.value;
        const duration = document.getElementById('consultation-duration')?.value;
        const description = document.getElementById('service-description')?.value?.trim();
        const contactInfo = document.getElementById('contact-info')?.value?.trim();

        const settings = {
            consultationPrice: parseInt(price) || 2000,
            consultationDuration: parseInt(duration) || 60,
            serviceDescription: description,
            contactInfo: contactInfo,
            updatedAt: new Date().toISOString()
        };

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ø—Ä–æ—Ñ–∏–ª–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        AuthSystem.updateUser({ tarotSettings: settings });

        TelegramApp.showAlert('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!');
        Components.showNotification('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞—Ä–æ–ª–æ–≥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', 'success');
        TelegramApp.hapticFeedback('success');

        ConfigUtils.log('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ç–∞—Ä–æ–ª–æ–≥–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:', settings);
    },

    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    exportData() {
        const currentUser = AuthSystem.getCurrentUser();
        if (!currentUser) return;

        const userData = {
            profile: currentUser,
            bookings: BookingStorage.getUserBookings(currentUser.id),
            referrals: ReferralStorage.getUserReferrals(currentUser.id),
            slots: currentUser.role === CONFIG.USER_ROLES.TAROT ? TimeSlotStorage.getAll() : [],
            exportedAt: new Date().toISOString()
        };

        const dataStr = JSON.stringify(userData, null, 2);
        const blob = new Blob([dataStr], { type: 'application/json' });
        const url = URL.createObjectURL(blob);

        const a = document.createElement('a');
        a.href = url;
        a.download = `tarot_profile_${currentUser.id}_${new Date().toISOString().split('T')[0]}.json`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);

        Components.showNotification('–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã', 'success');
        TelegramApp.hapticFeedback('success');
    },

    // –û—á–∏—Å—Ç–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
    clearData() {
        TelegramApp.showConfirm(
            '–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ —É–¥–∞–ª–∏—Ç –≤—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ: –∑–∞–ø–∏—Å–∏, —Å–ª–æ—Ç—ã –≤—Ä–µ–º–µ–Ω–∏, –Ω–∞—Å—Ç—Ä–æ–π–∫–∏. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?',
            (confirmed) => {
                if (confirmed) {
                    TelegramApp.showConfirm(
                        '–í—ã —É–≤–µ—Ä–µ–Ω—ã? –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!',
                        (doubleConfirmed) => {
                            if (doubleConfirmed) {
                                Storage.clear();
                                TelegramApp.showAlert('–í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ.');
                                TelegramApp.hapticFeedback('success');

                                setTimeout(() => {
                                    window.location.reload();
                                }, 2000);
                            }
                        }
                    );
                }
            }
        );
    },

    // –ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    getNotificationSettings() {
        const currentUser = AuthSystem.getCurrentUser();
        return currentUser?.notificationSettings || {
            bookingReminders: true,
            statusUpdates: true,
            promotional: false
        };
    },

    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    saveNotificationSettings(settings) {
        AuthSystem.updateUser({
            notificationSettings: settings,
            updatedAt: new Date().toISOString()
        });

        Components.showNotification('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã', 'success');
    }
};

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å
window.ProfileManager = ProfileManager;