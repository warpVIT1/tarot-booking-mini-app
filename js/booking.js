// –ú–æ–¥—É–ª—å —Å–∏—Å—Ç–µ–º—ã –∑–∞–ø–∏—Å–µ–π —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Ç–∞—Ä–æ–ª–æ–≥–æ–≤
const BookingSystem = {
    selectedSlot: null,
    currentTarot: null,

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    init() {
        ConfigUtils.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∑–∞–ø–∏—Å–µ–π');
        this.loadCurrentTarot();
        this.loadAvailableSlots();
    },

    // –ó–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Ç–∞—Ä–æ–ª–æ–≥–µ
    loadCurrentTarot() {
        const currentUser = AuthSystem.getCurrentUser();
        if (!currentUser || currentUser.role !== CONFIG.USER_ROLES.CLIENT) {
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ç–∞—Ä–æ–ª–æ–≥–∞
        this.currentTarot = AuthSystem.getCurrentTarot();

        if (this.currentTarot) {
            ConfigUtils.log('üîÆ –¢–µ–∫—É—â–∏–π —Ç–∞—Ä–æ–ª–æ–≥:', this.currentTarot.tarotData.displayName);
            this.showTarotInfo();
        } else {
            ConfigUtils.log('‚ÑπÔ∏è –ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∞—Ä–æ–ª–æ–≥–∞');
            this.showNoTarotMessage();
        }
    },

    // –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞—Ä–æ–ª–æ–≥–µ
    showTarotInfo() {
        const container = document.querySelector('.section-header');
        if (!container || !this.currentTarot) return;

        const tarotData = this.currentTarot.tarotData;

        container.innerHTML = `
            <h2>üîÆ –ó–∞–ø–∏—Å—å –∫ —Ç–∞—Ä–æ–ª–æ–≥—É</h2>
            <div class="current-tarot-info">
                <div class="tarot-card">
                    <div class="tarot-avatar">
                        ${this.currentTarot.photoUrl ?
                            `<img src="${this.currentTarot.photoUrl}" alt="${tarotData.displayName}">` :
                            `<div class="avatar-placeholder">${tarotData.displayName.charAt(0)}</div>`
                        }
                    </div>
                    <div class="tarot-details">
                        <h3>${tarotData.displayName}</h3>
                        <p class="tarot-price">${tarotData.price}‚ÇΩ –∑–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é</p>
                        <p class="tarot-experience">–û–ø—ã—Ç: ${this.getExperienceText(tarotData.experience)}</p>
                        ${tarotData.specialization ?
                            `<p class="tarot-specialization">${tarotData.specialization}</p>` : ''
                        }
                    </div>
                </div>
                <div class="tarot-actions">
                    <button onclick="BookingSystem.switchTarot()" class="secondary-btn btn-sm">
                        –°–º–µ–Ω–∏—Ç—å —Ç–∞—Ä–æ–ª–æ–≥–∞
                    </button>
                </div>
            </div>
            <p>–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏</p>
        `;
    },

    // –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ç–∞—Ä–æ–ª–æ–≥–∞
    showNoTarotMessage() {
        const container = document.getElementById('available-slots');
        if (!container) return;

        container.innerHTML = `
            <div class="empty-state">
                <div class="empty-state-icon">üîÆ</div>
                <h3>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–æ–ª–æ–≥–∞</h3>
                <p>–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–æ–ª–æ–≥–∞, –∫ –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è</p>
                <button onclick="BookingSystem.showTarotsList()" class="primary-btn" style="margin-top: 20px;">
                    –í—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–æ–ª–æ–≥–∞
                </button>
            </div>
        `;
    },

    // –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∞—Ä–æ–ª–æ–≥–æ–≤
    showTarotsList() {
        const tarotsList = Storage.get('tarots_list') || [];

        if (tarotsList.length === 0) {
            TelegramApp.showAlert('–¢–∞—Ä–æ–ª–æ–≥–∏ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
            return;
        }

        const tarots = tarotsList.map((tarot, index) => ({
            value: tarot.id,
            title: tarot.tarotData.displayName,
            description: `${tarot.tarotData.price}‚ÇΩ ‚Ä¢ ${this.getExperienceText(tarot.tarotData.experience)}`,
            icon: 'üîÆ'
        }));

        if (typeof Modal !== 'undefined') {
            Modal.showSelect(
                '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–æ–ª–æ–≥–∞',
                tarots,
                (tarotId) => this.selectTarot(tarotId),
                () => ConfigUtils.log('–í—ã–±–æ—Ä —Ç–∞—Ä–æ–ª–æ–≥–∞ –æ—Ç–º–µ–Ω–µ–Ω')
            );
        }
    },

    // –í—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–æ–ª–æ–≥–∞
    selectTarot(tarotId) {
        const tarotsList = Storage.get('tarots_list') || [];
        const selectedTarot = tarotsList.find(t => t.id.toString() === tarotId.toString());

        if (!selectedTarot) {
            TelegramApp.showAlert('–¢–∞—Ä–æ–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å–º–µ–Ω–æ–π —Ç–∞—Ä–æ–ª–æ–≥–∞
        const currentUser = AuthSystem.getCurrentUser();
        if (currentUser) {
            const clientConnections = Storage.get(CONFIG.STORAGE_KEYS.TAROT_CLIENTS) || {};

            if (!clientConnections[currentUser.id]) {
                clientConnections[currentUser.id] = {
                    selectedTarots: [],
                    currentTarot: null,
                    createdAt: new Date().toISOString()
                };
            }

            const userConnections = clientConnections[currentUser.id];

            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–∞—Ä–æ–ª–æ–≥–∞ –≤ —Å–ø–∏—Å–æ–∫
            if (!userConnections.selectedTarots.find(t => t.tarotId.toString() === tarotId.toString())) {
                userConnections.selectedTarots.push({
                    tarotId: tarotId,
                    tarotName: selectedTarot.tarotData.displayName,
                    addedAt: new Date().toISOString()
                });
            }

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–∞–∫ —Ç–µ–∫—É—â–µ–≥–æ
            userConnections.currentTarot = tarotId;

            Storage.set(CONFIG.STORAGE_KEYS.TAROT_CLIENTS, clientConnections);
        }

        this.currentTarot = selectedTarot;

        TelegramApp.showAlert(`–í—ã–±—Ä–∞–Ω —Ç–∞—Ä–æ–ª–æ–≥: ${selectedTarot.tarotData.displayName}`);
        TelegramApp.hapticFeedback('success');

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        this.showTarotInfo();
        this.loadAvailableSlots();

        ConfigUtils.log('‚úÖ –í—ã–±—Ä–∞–Ω —Ç–∞—Ä–æ–ª–æ–≥:', selectedTarot.tarotData.displayName);
    },

    // –°–º–µ–Ω–∏—Ç—å —Ç–∞—Ä–æ–ª–æ–≥–∞
    switchTarot() {
        const clientTarots = AuthSystem.getClientTarots();

        if (clientTarots.length <= 1) {
            this.showTarotsList();
            return;
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–∂–µ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ç–∞—Ä–æ–ª–æ–≥–æ–≤ + –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ
        const tarots = clientTarots.map(ct => ({
            value: ct.tarotId,
            title: ct.tarotName,
            description: '–í–∞—à —Ç–∞—Ä–æ–ª–æ–≥',
            icon: 'üîÆ'
        }));

        tarots.push({
            value: 'add_new',
            title: '–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–≥–æ —Ç–∞—Ä–æ–ª–æ–≥–∞',
            description: '–í—ã–±—Ä–∞—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö',
            icon: '‚ûï'
        });

        if (typeof Modal !== 'undefined') {
            Modal.showSelect(
                '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–æ–ª–æ–≥–∞',
                tarots,
                (value) => {
                    if (value === 'add_new') {
                        this.showTarotsList();
                    } else {
                        this.selectTarot(value);
                    }
                }
            );
        }
    },

    // –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç –æ–ø—ã—Ç–∞
    getExperienceText(experience) {
        const experiences = {
            'beginner': '–ù–∞—á–∏–Ω–∞—é—â–∏–π',
            'intermediate': '–ü—Ä–∞–∫—Ç–∏–∫—É—é—â–∏–π',
            'advanced': '–û–ø—ã—Ç–Ω—ã–π',
            'expert': '–≠–∫—Å–ø–µ—Ä—Ç'
        };
        return experiences[experience] || '–ù–µ —É–∫–∞–∑–∞–Ω';
    },

    // –ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
    loadAvailableSlots() {
        const container = document.getElementById('available-slots');
        if (!container) {
            ConfigUtils.log('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä available-slots –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        // –ï—Å–ª–∏ –Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∞—Ä–æ–ª–æ–≥–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        if (!this.currentTarot) {
            this.showNoTarotMessage();
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ—Ç—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∞—Ä–æ–ª–æ–≥–∞
        const availableSlots = this.getTarotAvailableSlots(this.currentTarot.id);
        ConfigUtils.log('–ù–∞–π–¥–µ–Ω–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –¥–ª—è —Ç–∞—Ä–æ–ª–æ–≥–∞:', availableSlots.length);

        if (availableSlots.length === 0) {
            container.innerHTML = `
                <div class="empty-state">
                    <div class="empty-state-icon">üìÖ</div>
                    <h3>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏</h3>
                    <p>–£ —Ç–∞—Ä–æ–ª–æ–≥–∞ ${this.currentTarot.tarotData.displayName} –ø–æ–∫–∞ –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤</p>
                    <button onclick="BookingSystem.switchTarot()" class="secondary-btn" style="margin-top: 15px;">
                        –í—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ —Ç–∞—Ä–æ–ª–æ–≥–∞
                    </button>
                </div>
            `;
            return;
        }

        container.innerHTML = availableSlots.map(slot =>
            Components.createTimeSlot(slot)
        ).join('');

        ConfigUtils.log('–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
    },

    // –ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∞—Ä–æ–ª–æ–≥–∞
    getTarotAvailableSlots(tarotId) {
        const allSlots = TimeSlotStorage.getAll();
        const now = new Date();

        return allSlots.filter(slot => {
            const slotStart = new Date(slot.start);
            return (
                slot.status === CONFIG.SLOT_STATUS.AVAILABLE &&
                slotStart > now &&
                slot.tarotId && slot.tarotId.toString() === tarotId.toString()
            );
        }).sort((a, b) => new Date(a.start) - new Date(b.start));
    },

    // –í—ã–±—Ä–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç
    selectTimeSlot(slotId) {
        const slot = TimeSlotStorage.findById(slotId);
        if (!slot) {
            ConfigUtils.error('–°–ª–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω:', slotId);
            return;
        }

        if (slot.status !== CONFIG.SLOT_STATUS.AVAILABLE) {
            TelegramApp.showAlert('–≠—Ç–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç —É–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–ª–∏–∫—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å –¥—Ä—É–≥–∏–º–∏ —Ç–∞—Ä–æ–ª–æ–≥–∞–º–∏
        const conflictCheck = AuthSystem.checkTimeConflict(
            slot.start,
            slot.end,
            this.currentTarot?.id
        );

        if (conflictCheck.hasConflict) {
            this.showTimeConflictWarning(conflictCheck, slot);
            return;
        }

        this.selectedSlot = slot;
        ConfigUtils.log('–í—ã–±—Ä–∞–Ω —Å–ª–æ—Ç:', slot);

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –∑–∞–ø–∏—Å–∏
        this.showBookingForm(slot);

        // –¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
        TelegramApp.hapticFeedback('selection');
    },

    // –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–µ –≤—Ä–µ–º–µ–Ω–∏
    showTimeConflictWarning(conflictCheck, newSlot) {
        const conflictSlot = conflictCheck.conflictSlot;
        const conflictBooking = conflictCheck.conflictBooking;

        const conflictStart = new Date(conflictSlot.start);
        const conflictEnd = new Date(conflictSlot.end);
        const newStart = new Date(newSlot.start);
        const newEnd = new Date(newSlot.end);

        const message = `
–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∑–∞–ø–∏—Å—å –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è:

–°—É—â–µ—Å—Ç–≤—É—é—â–∞—è –∑–∞–ø–∏—Å—å:
${conflictStart.toLocaleDateString('ru-RU')}
${conflictStart.toLocaleTimeString('ru-RU', {hour: '2-digit', minute: '2-digit'})} - ${conflictEnd.toLocaleTimeString('ru-RU', {hour: '2-digit', minute: '2-digit'})}

–ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å:
${newStart.toLocaleDateString('ru-RU')}
${newStart.toLocaleTimeString('ru-RU', {hour: '2-digit', minute: '2-digit'})} - ${newEnd.toLocaleTimeString('ru-RU', {hour: '2-digit', minute: '2-digit'})}

–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å.`;

        TelegramApp.showAlert(message);
        TelegramApp.hapticFeedback('error');
    },

    // –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–æ—Ä–º—É –∑–∞–ø–∏—Å–∏
    showBookingForm(slot) {
        const formContainer = document.getElementById('booking-form');
        if (!formContainer) {
            ConfigUtils.error('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä booking-form –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        formContainer.innerHTML = Components.createBookingForm(slot, this.currentTarot);
        formContainer.style.display = 'block';

        // –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —Ñ–æ—Ä–º–µ
        formContainer.scrollIntoView({ behavior: 'smooth' });

        ConfigUtils.log('–§–æ—Ä–º–∞ –∑–∞–ø–∏—Å–∏ –ø–æ–∫–∞–∑–∞–Ω–∞');
    },

    // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å
    submitBooking(slotId) {
        const name = document.getElementById('client-name')?.value?.trim();
        const contact = document.getElementById('client-contact')?.value?.trim();
        const question = document.getElementById('client-question')?.value?.trim();

        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        if (!name) {
            TelegramApp.showAlert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è');
            return;
        }

        if (!contact) {
            TelegramApp.showAlert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏');
            return;
        }

        if (!this.currentTarot) {
            TelegramApp.showAlert('–û—à–∏–±–∫–∞: —Ç–∞—Ä–æ–ª–æ–≥ –Ω–µ –≤—ã–±—Ä–∞–Ω');
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–ª–æ—Ç –µ—â–µ –¥–æ—Å—Ç—É–ø–µ–Ω
        const slot = TimeSlotStorage.findById(slotId);
        if (!slot || slot.status !== CONFIG.SLOT_STATUS.AVAILABLE) {
            TelegramApp.showAlert('–í—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —É–∂–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.');
            this.loadAvailableSlots();
            this.cancelBooking();
            return;
        }

        // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞ –≤—Ä–µ–º–µ–Ω–∏
        const conflictCheck = AuthSystem.checkTimeConflict(
            slot.start,
            slot.end,
            this.currentTarot.id
        );

        if (conflictCheck.hasConflict) {
            TelegramApp.showAlert('–û–±–Ω–∞—Ä—É–∂–µ–Ω –∫–æ–Ω—Ñ–ª–∏–∫—Ç –≤—Ä–µ–º–µ–Ω–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è.');
            this.cancelBooking();
            return;
        }

        const currentUser = AuthSystem.getCurrentUser();
        if (!currentUser) {
            ConfigUtils.error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
            return;
        }

        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
        const booking = {
            clientId: currentUser.id,
            clientName: name,
            clientContact: contact,
            slotId: slotId,
            consultationType: 'online',
            question: question || '',
            tarotId: this.currentTarot.id,
            tarotName: this.currentTarot.tarotData.displayName,
            price: this.currentTarot.tarotData.price
        };

        try {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø–∏—Å—å
            const savedBooking = BookingStorage.add(booking);

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–ª–æ—Ç–∞
            TimeSlotStorage.update(slotId, { status: CONFIG.SLOT_STATUS.PENDING });

            ConfigUtils.log('–ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞:', savedBooking);

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—Ö–µ
            TelegramApp.showAlert(`–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ç–∞—Ä–æ–ª–æ–≥—É ${this.currentTarot.tarotData.displayName}! –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.`);

            // –¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
            TelegramApp.hapticFeedback('success');

            // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ª–æ—Ç—ã
            this.cancelBooking();
            this.loadAvailableSlots();

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
            Components.showNotification('–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!', 'success');

        } catch (error) {
            ConfigUtils.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏:', error);
            TelegramApp.showAlert('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
            TelegramApp.hapticFeedback('error');
        }
    },

    // –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å
    cancelBooking() {
        const formContainer = document.getElementById('booking-form');
        if (formContainer) {
            formContainer.style.display = 'none';
            formContainer.innerHTML = '';
        }

        this.selectedSlot = null;
        ConfigUtils.log('–§–æ—Ä–º–∞ –∑–∞–ø–∏—Å–∏ —Å–∫—Ä—ã—Ç–∞');

        // –£–±–∏—Ä–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å–æ —Å–ª–æ—Ç–æ–≤
        document.querySelectorAll('.time-slot.selected').forEach(slot => {
            slot.classList.remove('selected');
        });
    },

    // –ü–æ–ª—É—á–∏—Ç—å –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    getUserBookings() {
        const currentUser = AuthSystem.getCurrentUser();
        if (!currentUser) {
            return [];
        }

        return BookingStorage.getUserBookings(currentUser.id);
    },

    // –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø–∏—Å–µ–π
    showBookingHistory() {
        const bookings = this.getUserBookings();

        if (bookings.length === 0) {
            return `
                <div class="empty-state">
                    <div class="empty-state-icon">üìã</div>
                    <h3>–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π</h3>
                    <p>–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–µ—Ä–≤–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏</p>
                </div>
            `;
        }

        return bookings.map(booking => Components.createBookingCard(booking)).join('');
    },

    // –û—Ç–º–µ–Ω–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
    cancelExistingBooking(bookingId) {
        TelegramApp.showConfirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å?', (confirmed) => {
            if (confirmed) {
                const booking = BookingStorage.findById(bookingId);
                if (booking) {
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏
                    BookingStorage.update(bookingId, {
                        status: CONFIG.BOOKING_STATUS.CANCELLED,
                        cancelledBy: 'client',
                        cancelledAt: new Date().toISOString()
                    });

                    // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç
                    if (booking.slotId) {
                        TimeSlotStorage.update(booking.slotId, { status: CONFIG.SLOT_STATUS.AVAILABLE });
                    }

                    ConfigUtils.log('–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞:', bookingId);
                    TelegramApp.showAlert('–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞');
                    TelegramApp.hapticFeedback('success');

                    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                    this.loadAvailableSlots();
                    Components.showNotification('–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞', 'success');
                }
            }
        });
    },

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –º–æ–∂–Ω–æ –ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å
    canCancelBooking(booking) {
        if (booking.status !== CONFIG.BOOKING_STATUS.PENDING &&
            booking.status !== CONFIG.BOOKING_STATUS.CONFIRMED) {
            return false;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è (–º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å –º–∏–Ω–∏–º—É–º –∑–∞ —á–∞—Å)
        const slot = TimeSlotStorage.findById(booking.slotId);
        if (slot) {
            const slotStart = new Date(slot.start);
            const now = new Date();
            const diffHours = (slotStart - now) / (1000 * 60 * 60);

            return diffHours >= 1; // –ú–∏–Ω–∏–º—É–º —á–∞—Å –¥–æ –Ω–∞—á–∞–ª–∞
        }

        return true;
    },

    // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤—è–∑—è—Ö –∫–ª–∏–µ–Ω—Ç–∞ —Å —Ç–∞—Ä–æ–ª–æ–≥–∞–º–∏
    getClientTarotConnections() {
        const currentUser = AuthSystem.getCurrentUser();
        if (!currentUser) return null;

        const clientConnections = Storage.get(CONFIG.STORAGE_KEYS.TAROT_CLIENTS) || {};
        return clientConnections[currentUser.id] || null;
    }
};

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å
window.BookingSystem = BookingSystem;