// –ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram Web App API
const TelegramApp = {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App
    init() {
        ConfigUtils.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram Web App');

        if (!ConfigUtils.isTelegramApp()) {
            ConfigUtils.log('–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ –≤ Telegram, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º');
            this.initTestMode();
            return;
        }

        const tg = window.Telegram.WebApp;

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞
        tg.ready();
        tg.expand();

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ç–µ–º—É Telegram
        this.applyTheme();

        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–æ–∫
        this.setupMainButton();
        this.setupBackButton();

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è –∑–∞–∫—Ä—ã—Ç–∏—è
        tg.onEvent('mainButtonClicked', this.handleMainButtonClick.bind(this));
        tg.onEvent('backButtonClicked', this.handleBackButtonClick.bind(this));

        ConfigUtils.log('Telegram Web App –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    },

    // –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –≤–Ω–µ Telegram
    initTestMode() {
        window.Telegram = {
            WebApp: {
                initData: '',
                initDataUnsafe: {
                    user: CONFIG.DEV_USER,
                    start_param: 'ref_123456' // –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
                },
                colorScheme: 'light',
                ready: () => ConfigUtils.log('Telegram.WebApp.ready() called'),
                expand: () => ConfigUtils.log('Telegram.WebApp.expand() called'),
                close: () => {
                    if (CONFIG.DEV_MODE) {
                        alert('–í —Ä–µ–∞–ª—å–Ω–æ–º Telegram –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–∫—Ä—ã–ª–æ—Å—å –±—ã');
                    }
                },
                MainButton: {
                    text: '',
                    show: () => ConfigUtils.log('MainButton.show() called'),
                    hide: () => ConfigUtils.log('MainButton.hide() called'),
                    setText: (text) => ConfigUtils.log('MainButton.setText():', text),
                    setParams: (params) => ConfigUtils.log('MainButton.setParams():', params)
                },
                BackButton: {
                    show: () => ConfigUtils.log('BackButton.show() called'),
                    hide: () => ConfigUtils.log('BackButton.hide() called')
                },
                onEvent: (event, callback) => ConfigUtils.log('onEvent():', event),
                showAlert: (message) => {
                    if (CONFIG.DEV_MODE) {
                        alert('üì± Telegram Alert:\n' + message);
                    } else {
                        alert(message);
                    }
                },
                showConfirm: (message, callback) => {
                    let result;
                    if (CONFIG.DEV_MODE) {
                        result = confirm('üì± Telegram Confirm:\n' + message);
                    } else {
                        result = confirm(message);
                    }
                    callback(result);
                },
                showPopup: (params, callback) => {
                    let message = params.message;
                    if (CONFIG.DEV_MODE) {
                        message = 'üì± Telegram Popup:\n' + params.title + '\n\n' + message;
                    }
                    alert(message);
                    if (callback) callback('ok');
                },
                hapticFeedback: {
                    impactOccurred: (style) => ConfigUtils.log('Haptic impact:', style),
                    selectionChanged: () => ConfigUtils.log('Haptic selection changed'),
                    notificationOccurred: (type) => ConfigUtils.log('Haptic notification:', type)
                }
            }
        };
        ConfigUtils.log('–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º Telegram –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤ –∫–æ–Ω—Å–æ–ª–∏ —á—Ç–æ —ç—Ç–æ –¥–µ–±–∞–≥ —Ä–µ–∂–∏–º
        if (CONFIG.DEV_MODE) {
            console.log(`
üîß ========== DEV MODE ========== üîß
üì± Telegram Web App —ç–º—É–ª–∏—Ä—É–µ—Ç—Å—è
üë§ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${CONFIG.DEV_USER.first_name}
üöÄ –î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Dev Panel (—Å–ø—Ä–∞–≤–∞ –≤–≤–µ—Ä—Ö—É)
üîß =============================== üîß
            `);
        }
    },

    // –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–º—ã Telegram
    applyTheme() {
        const tg = window.Telegram.WebApp;
        const theme = tg.colorScheme;

        if (theme === 'dark') {
            document.body.classList.add('dark');
        }

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ü–≤–µ—Ç–∞ —Ç–µ–º—ã Telegram
        if (tg.themeParams) {
            const root = document.documentElement;
            root.style.setProperty('--tg-bg-color', tg.themeParams.bg_color || '#ffffff');
            root.style.setProperty('--tg-text-color', tg.themeParams.text_color || '#000000');
            root.style.setProperty('--tg-hint-color', tg.themeParams.hint_color || '#999999');
            root.style.setProperty('--tg-button-color', tg.themeParams.button_color || '#40a7e3');
            root.style.setProperty('--tg-button-text-color', tg.themeParams.button_text_color || '#ffffff');
        }
    },

    // –ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    getUserData() {
        const tg = window.Telegram.WebApp;
        const user = tg.initDataUnsafe?.user;

        ConfigUtils.log('–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram');
        ConfigUtils.log('initDataUnsafe:', tg.initDataUnsafe);
        ConfigUtils.log('user:', user);

        if (!user) {
            ConfigUtils.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ initDataUnsafe, –ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –¥—Ä—É–≥–∏–º–∏ —Å–ø–æ—Å–æ–±–∞–º–∏');

            // –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –¥—Ä—É–≥–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
            if (tg.initData) {
                ConfigUtils.log('–ü—ã—Ç–∞–µ–º—Å—è –ø–∞—Ä—Å–∏—Ç—å initData:', tg.initData);
                try {
                    const params = new URLSearchParams(tg.initData);
                    const userParam = params.get('user');
                    if (userParam) {
                        const userData = JSON.parse(decodeURIComponent(userParam));
                        ConfigUtils.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–µ–Ω –∏–∑ initData:', userData);
                        return {
                            id: userData.id,
                            firstName: userData.first_name,
                            lastName: userData.last_name || '',
                            username: userData.username || '',
                            languageCode: userData.language_code || 'ru',
                            isPremium: userData.is_premium || false,
                            photoUrl: userData.photo_url || ''
                        };
                    }
                } catch (error) {
                    ConfigUtils.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ initData:', error);
                }
            }

            ConfigUtils.log('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º null');
            return null;
        }

        const userData = {
            id: user.id,
            firstName: user.first_name,
            lastName: user.last_name || '',
            username: user.username || '',
            languageCode: user.language_code || 'ru',
            isPremium: user.is_premium || false,
            photoUrl: user.photo_url || ''
        };

        ConfigUtils.log('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–µ–Ω—ã:', userData);
        return userData;
    },

    // –ü–æ–ª—É—á–∏—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—É—Å–∫–∞
    getReferralCode() {
        const tg = window.Telegram.WebApp;
        const startParam = tg.initDataUnsafe?.start_param;

        if (startParam && startParam.startsWith('ref_')) {
            const referralCode = startParam.replace('ref_', '');
            ConfigUtils.log('–û–±–Ω–∞—Ä—É–∂–µ–Ω —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥:', referralCode);
            return referralCode;
        }

        return null;
    },

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–∞–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏
    setupMainButton() {
        const mainButton = window.Telegram.WebApp.MainButton;
        mainButton.hide();
    },

    // –ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
    showMainButton(text, callback) {
        const mainButton = window.Telegram.WebApp.MainButton;
        mainButton.setText(text);
        mainButton.show();
        this.mainButtonCallback = callback;
    },

    // –°–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω—É—é –∫–Ω–æ–ø–∫—É
    hideMainButton() {
        window.Telegram.WebApp.MainButton.hide();
        this.mainButtonCallback = null;
    },

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –≥–ª–∞–≤–Ω–æ–π –∫–Ω–æ–ø–∫–µ
    handleMainButtonClick() {
        if (this.mainButtonCallback) {
            this.mainButtonCallback();
        }
    },

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    setupBackButton() {
        const backButton = window.Telegram.WebApp.BackButton;
        backButton.hide();
    },

    // –ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    showBackButton(callback) {
        const backButton = window.Telegram.WebApp.BackButton;
        backButton.show();
        this.backButtonCallback = callback;
    },

    // –°–∫—Ä—ã—Ç—å –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    hideBackButton() {
        window.Telegram.WebApp.BackButton.hide();
        this.backButtonCallback = null;
    },

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –ø–æ –∫–Ω–æ–ø–∫–µ "–ù–∞–∑–∞–¥"
    handleBackButtonClick() {
        if (this.backButtonCallback) {
            this.backButtonCallback();
        }
    },

    // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    showAlert(message) {
        if (CONFIG.DEV_MODE && !ConfigUtils.isTelegramApp()) {
            // –í –¥–µ–±–∞–≥ —Ä–µ–∂–∏–º–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π alert
            alert('üì± ' + message);
        } else {
            // –í Telegram –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥
            try {
                window.Telegram.WebApp.showAlert(message);
            } catch (error) {
                // –ï—Å–ª–∏ –º–µ—Ç–æ–¥ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º fallback
                alert(message);
            }
        }
    },

    // –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    showConfirm(message, callback) {
        window.Telegram.WebApp.showConfirm(message, callback);
    },

    // –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ø–∞–ø
    showPopup(title, message, buttons = ['ok']) {
        return new Promise((resolve) => {
            const params = {
                title,
                message,
                buttons: buttons.map(btn => ({
                    id: btn,
                    type: btn === 'ok' ? 'default' : 'destructive',
                    text: btn === 'ok' ? 'OK' : btn === 'cancel' ? '–û—Ç–º–µ–Ω–∞' : btn
                }))
            };

            window.Telegram.WebApp.showPopup(params, (buttonId) => {
                resolve(buttonId);
            });
        });
    },

    // –¢–∞–∫—Ç–∏–ª—å–Ω–∞—è –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å
    hapticFeedback(type = 'light') {
        const haptic = window.Telegram.WebApp.hapticFeedback;

        switch (type) {
            case 'light':
            case 'medium':
            case 'heavy':
                haptic.impactOccurred(type);
                break;
            case 'selection':
                haptic.selectionChanged();
                break;
            case 'success':
            case 'warning':
            case 'error':
                haptic.notificationOccurred(type);
                break;
        }
    },

    // –ó–∞–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    close() {
        window.Telegram.WebApp.close();
    },

    // –ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π
    shareReferralLink(referralCode) {
        const botLink = ConfigUtils.getBotReferralLink(referralCode);
        const message = `üîÆ –ó–∞–ø–∏—à–∏—Å—å –Ω–∞ —Ç–∞—Ä–æ-–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —á–µ—Ä–µ–∑ –º–æ—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –∏ –ø–æ–ª—É—á–∏ —Å–∫–∏–¥–∫—É!\n\n${botLink}`;

        // –í —Ä–µ–∞–ª—å–Ω–æ–º Telegram —ç—Ç–æ –æ—Ç–∫—Ä–æ–µ—Ç –¥–∏–∞–ª–æ–≥ –≤—ã–±–æ—Ä–∞ —á–∞—Ç–∞
        if (window.Telegram.WebApp.openTelegramLink) {
            window.Telegram.WebApp.openTelegramLink(`https://t.me/share/url?url=${encodeURIComponent(botLink)}&text=${encodeURIComponent(message)}`);
        } else {
            // –§–æ–ª–ª–±—ç–∫ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
            this.copyToClipboard(botLink);
            this.showAlert('–°—Å—ã–ª–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞!');
        }
    },

    // –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞
    copyToClipboard(text) {
        if (navigator.clipboard) {
            navigator.clipboard.writeText(text).catch(() => {
                this.fallbackCopyToClipboard(text);
            });
        } else {
            this.fallbackCopyToClipboard(text);
        }
    },

    // –§–æ–ª–ª–±—ç–∫ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
    fallbackCopyToClipboard(text) {
        const textArea = document.createElement('textarea');
        textArea.value = text;
        textArea.style.position = 'fixed';
        textArea.style.left = '-999999px';
        textArea.style.top = '-999999px';
        document.body.appendChild(textArea);
        textArea.focus();
        textArea.select();

        try {
            document.execCommand('copy');
        } catch (err) {
            ConfigUtils.error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç:', err);
        }

        document.body.removeChild(textArea);
    },

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è –ª–∏ —Ñ—É–Ω–∫—Ü–∏—è
    isFeatureSupported(feature) {
        const tg = window.Telegram.WebApp;

        switch (feature) {
            case 'popup':
                return !!tg.showPopup;
            case 'haptic':
                return !!tg.hapticFeedback;
            case 'mainButton':
                return !!tg.MainButton;
            case 'backButton':
                return !!tg.BackButton;
            default:
                return false;
        }
    }
};

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å
window.TelegramApp = TelegramApp;