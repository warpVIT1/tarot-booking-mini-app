// –ú–æ–¥—É–ª—å –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —Ç–∞—Ä–æ–ª–æ–≥–æ–≤
const AdminPanel = {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    init() {
        ConfigUtils.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
        this.loadBookings();
        this.setupTimeManagement();
    },

    // –ó–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–ø–∏—Å–∏
    loadBookings() {
        const container = document.getElementById('admin-bookings');
        if (!container) {
            ConfigUtils.log('–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä admin-bookings –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }

        const currentUser = AuthSystem.getCurrentUser();
        if (!currentUser) {
            container.innerHTML = '<p>–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω</p>';
            return;
        }

        // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ (–≤ —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ tarotId)
        const allBookings = BookingStorage.getAll();
        ConfigUtils.log('–ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π:', allBookings.length);

        if (allBookings.length === 0) {
            container.innerHTML = `
                <div style="text-align: center; padding: 40px; color: #666;">
                    <div style="font-size: 3rem; margin-bottom: 20px;">üìã</div>
                    <h3>–ó–∞–ø–∏—Å–µ–π –ø–æ–∫–∞ –Ω–µ—Ç</h3>
                    <p>–î–æ–±–∞–≤—å—Ç–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è, –∏ –∫–ª–∏–µ–Ω—Ç—ã —Å–º–æ–≥—É—Ç –∑–∞–ø–∏—Å–∞—Ç—å—Å—è</p>
                </div>
            `;
            return;
        }

        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏: —Å–Ω–∞—á–∞–ª–∞ –æ–∂–∏–¥–∞—é—â–∏–µ, –ø–æ—Ç–æ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ
        const sortedBookings = allBookings.sort((a, b) => {
            const statusPriority = {
                [CONFIG.BOOKING_STATUS.PENDING]: 1,
                [CONFIG.BOOKING_STATUS.CONFIRMED]: 2,
                [CONFIG.BOOKING_STATUS.CANCELLED]: 3,
                [CONFIG.BOOKING_STATUS.COMPLETED]: 4
            };

            return statusPriority[a.status] - statusPriority[b.status];
        });

        container.innerHTML = sortedBookings.map(booking =>
            Components.createBookingCard(booking)
        ).join('');

        ConfigUtils.log('–ó–∞–ø–∏—Å–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
    },

    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–µ–º
    setupTimeManagement() {
        const addButton = document.getElementById('add-time-btn');
        if (addButton) {
            addButton.onclick = () => this.showTimeManagementModal();
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –±—ã—Å—Ç—Ä—ã–µ –∫–Ω–æ–ø–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
        this.createQuickTimeButtons();
    },

    // –°–æ–∑–¥–∞—Ç—å –±—ã—Å—Ç—Ä—ã–µ –∫–Ω–æ–ø–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
    createQuickTimeButtons() {
        const container = document.getElementById('time-management');
        if (!container) return;

        const tomorrow = new Date();
        tomorrow.setDate(tomorrow.getDate() + 1);
        const tomorrowStr = tomorrow.toISOString().split('T')[0];

        container.innerHTML = `
            <div class="time-management">
                <h3>–ë—ã—Å—Ç—Ä–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏</h3>

                <div class="form-group">
                    <label>–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:</label>
                    <input type="date" id="quick-date" value="${tomorrowStr}" min="${tomorrowStr}">
                </div>

                <div class="form-group">
                    <label>–î–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è:</label>
                    <div class="quick-times-grid" id="quick-times">
                        ${this.getQuickTimeOptions().map(time => `
                            <div class="time-option" data-time="${time.value}" onclick="AdminPanel.toggleTimeOption(this)">
                                ${time.label}
                            </div>
                        `).join('')}
                    </div>
                </div>

                <div class="form-group">
                    <button onclick="AdminPanel.addSelectedTimes()" class="primary-btn">
                        –î–æ–±–∞–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
                    </button>
                </div>

                <div class="form-group">
                    <h4>–ò–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –≤—Ä–µ–º—è:</h4>
                    <label>–ù–∞—á–∞–ª–æ:</label>
                    <input type="datetime-local" id="custom-start">
                    <label>–ö–æ–Ω–µ—Ü:</label>
                    <input type="datetime-local" id="custom-end">
                    <button onclick="AdminPanel.addCustomTime()" class="secondary-btn">
                        –î–æ–±–∞–≤–∏—Ç—å
                    </button>
                </div>

                <div class="form-group">
                    <h4>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ —Å–ª–æ—Ç–∞–º–∏:</h4>
                    <div id="existing-slots">
                        ${this.getExistingSlotsHTML()}
                    </div>
                </div>
            </div>
        `;
    },

    // –ü–æ–ª—É—á–∏—Ç—å –æ–ø—Ü–∏–∏ –±—ã—Å—Ç—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    getQuickTimeOptions() {
        return [
            { label: '09:00 - 10:00', value: '09:00-10:00' },
            { label: '10:00 - 11:00', value: '10:00-11:00' },
            { label: '11:00 - 12:00', value: '11:00-12:00' },
            { label: '12:00 - 13:00', value: '12:00-13:00' },
            { label: '14:00 - 15:00', value: '14:00-15:00' },
            { label: '15:00 - 16:00', value: '15:00-16:00' },
            { label: '16:00 - 17:00', value: '16:00-17:00' },
            { label: '17:00 - 18:00', value: '17:00-18:00' },
            { label: '18:00 - 19:00', value: '18:00-19:00' },
            { label: '19:00 - 20:00', value: '19:00-20:00' },
            { label: '20:00 - 21:00', value: '20:00-21:00' }
        ];
    },

    // –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å –≤—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏
    toggleTimeOption(element) {
        element.classList.toggle('selected');
        TelegramApp.hapticFeedback('selection');
    },

    // –î–æ–±–∞–≤–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    addSelectedTimes() {
        const selectedDate = document.getElementById('quick-date')?.value;
        const selectedTimes = document.querySelectorAll('.time-option.selected');

        if (!selectedDate) {
            TelegramApp.showAlert('–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É');
            return;
        }

        if (selectedTimes.length === 0) {
            TelegramApp.showAlert('–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è');
            return;
        }

        let addedCount = 0;

        selectedTimes.forEach(timeElement => {
            const timeRange = timeElement.dataset.time;
            const [startTime, endTime] = timeRange.split('-');

            const slot = {
                start: `${selectedDate}T${startTime}`,
                end: `${selectedDate}T${endTime}`
            };

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–∞–∫–æ–π —Å–ª–æ—Ç –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if (!this.slotExists(slot)) {
                TimeSlotStorage.add(slot);
                addedCount++;
            }
        });

        if (addedCount > 0) {
            TelegramApp.showAlert(`–î–æ–±–∞–≤–ª–µ–Ω–æ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤: ${addedCount}`);
            Components.showNotification(`–î–æ–±–∞–≤–ª–µ–Ω–æ ${addedCount} –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤`, 'success');
            TelegramApp.hapticFeedback('success');

            // –û—á–∏—â–∞–µ–º –≤—ã–±–æ—Ä
            selectedTimes.forEach(element => element.classList.remove('selected'));

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–ª–æ—Ç–æ–≤
            this.updateExistingSlots();

            // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∑–∞–ø–∏—Å–µ–π –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if (typeof BookingSystem !== 'undefined') {
                BookingSystem.loadAvailableSlots();
            }
        } else {
            TelegramApp.showAlert('–í—Å–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç');
        }
    },

    // –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
    addCustomTime() {
        const start = document.getElementById('custom-start')?.value;
        const end = document.getElementById('custom-end')?.value;

        if (!start || !end) {
            TelegramApp.showAlert('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è');
            return;
        }

        const startDate = new Date(start);
        const endDate = new Date(end);
        const now = new Date();

        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        if (startDate <= now) {
            TelegramApp.showAlert('–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º');
            return;
        }

        if (endDate <= startDate) {
            TelegramApp.showAlert('–í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–∑–∂–µ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—á–∞–ª–∞');
            return;
        }

        const duration = (endDate - startDate) / (1000 * 60); // –≤ –º–∏–Ω—É—Ç–∞—Ö
        if (duration < 30) {
            TelegramApp.showAlert('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: 30 –º–∏–Ω—É—Ç');
            return;
        }

        if (duration > 120) {
            TelegramApp.showAlert('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: 2 —á–∞—Å–∞');
            return;
        }

        const slot = { start, end };

        if (this.slotExists(slot)) {
            TelegramApp.showAlert('–¢–∞–∫–æ–π –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
            return;
        }

        TimeSlotStorage.add(slot);
        TelegramApp.showAlert('–í—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω!');
        Components.showNotification('–í—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω', 'success');
        TelegramApp.hapticFeedback('success');

        // –û—á–∏—â–∞–µ–º —Ñ–æ—Ä–º—É
        document.getElementById('custom-start').value = '';
        document.getElementById('custom-end').value = '';

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        this.updateExistingSlots();
        if (typeof BookingSystem !== 'undefined') {
            BookingSystem.loadAvailableSlots();
        }
    },

    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–ª–æ—Ç
    slotExists(newSlot) {
        const existingSlots = TimeSlotStorage.getAll();

        return existingSlots.some(slot =>
            slot.start === newSlot.start && slot.end === newSlot.end
        );
    },

    // –ü–æ–ª—É—á–∏—Ç—å HTML —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–ª–æ—Ç–æ–≤
    getExistingSlotsHTML() {
        const slots = TimeSlotStorage.getAll();
        const futureSlots = slots.filter(slot => new Date(slot.start) > new Date());

        if (futureSlots.length === 0) {
            return '<p>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤</p>';
        }

        return futureSlots.map(slot => {
            const startDate = new Date(slot.start);
            const endDate = new Date(slot.end);
            const statusText = slot.status === CONFIG.SLOT_STATUS.AVAILABLE ? '–°–≤–æ–±–æ–¥–Ω–æ' :
                              slot.status === CONFIG.SLOT_STATUS.PENDING ? '–û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è' : '–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–æ';

            return `
                <div class="existing-slot ${slot.status}">
                    <div class="slot-info">
                        <strong>${startDate.toLocaleDateString('ru-RU')}</strong><br>
                        ${startDate.toLocaleTimeString('ru-RU', {hour: '2-digit', minute: '2-digit'})} -
                        ${endDate.toLocaleTimeString('ru-RU', {hour: '2-digit', minute: '2-digit'})}
                        <br>
                        <span class="status-badge status-${slot.status}">${statusText}</span>
                    </div>
                    ${slot.status === CONFIG.SLOT_STATUS.AVAILABLE ? `
                        <button onclick="AdminPanel.removeSlot('${slot.id}')" class="btn-remove">
                            –£–¥–∞–ª–∏—Ç—å
                        </button>
                    ` : ''}
                </div>
            `;
        }).join('');
    },

    // –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–ª–æ—Ç–æ–≤
    updateExistingSlots() {
        const container = document.getElementById('existing-slots');
        if (container) {
            container.innerHTML = this.getExistingSlotsHTML();
        }
    },

    // –£–¥–∞–ª–∏—Ç—å —Å–ª–æ—Ç
    removeSlot(slotId) {
        TelegramApp.showConfirm('–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç?', (confirmed) => {
            if (confirmed) {
                TimeSlotStorage.remove(slotId);
                TelegramApp.showAlert('–í—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç —É–¥–∞–ª–µ–Ω');
                Components.showNotification('–í—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç —É–¥–∞–ª–µ–Ω', 'success');
                TelegramApp.hapticFeedback('success');

                this.updateExistingSlots();
                if (typeof BookingSystem !== 'undefined') {
                    BookingSystem.loadAvailableSlots();
                }
            }
        });
    },

    // –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å
    confirmBooking(bookingId) {
        const booking = BookingStorage.findById(bookingId);
        if (!booking) {
            ConfigUtils.error('–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', bookingId);
            return;
        }

        TelegramApp.showConfirm(`–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å –¥–ª—è ${booking.clientName}?`, (confirmed) => {
            if (confirmed) {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏
                BookingStorage.update(bookingId, {
                    status: CONFIG.BOOKING_STATUS.CONFIRMED,
                    confirmedAt: new Date().toISOString()
                });

                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å–ª–æ—Ç–∞
                if (booking.slotId) {
                    TimeSlotStorage.update(booking.slotId, { status: CONFIG.SLOT_STATUS.BOOKED });
                }

                ConfigUtils.log('–ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞:', bookingId);
                TelegramApp.showAlert('–ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!');
                Components.showNotification('–ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞', 'success');
                TelegramApp.hapticFeedback('success');

                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                this.loadBookings();
                if (typeof BookingSystem !== 'undefined') {
                    BookingSystem.loadAvailableSlots();
                }
            }
        });
    },

    // –û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å
    rejectBooking(bookingId) {
        const booking = BookingStorage.findById(bookingId);
        if (!booking) {
            ConfigUtils.error('–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞:', bookingId);
            return;
        }

        TelegramApp.showConfirm(`–û—Ç–∫–ª–æ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –¥–ª—è ${booking.clientName}?`, (confirmed) => {
            if (confirmed) {
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏
                BookingStorage.update(bookingId, {
                    status: CONFIG.BOOKING_STATUS.CANCELLED,
                    cancelledAt: new Date().toISOString(),
                    cancelledBy: 'tarot'
                });

                // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å–ª–æ—Ç
                if (booking.slotId) {
                    TimeSlotStorage.update(booking.slotId, { status: CONFIG.SLOT_STATUS.AVAILABLE });
                }

                ConfigUtils.log('–ó–∞–ø–∏—Å—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞:', bookingId);
                TelegramApp.showAlert('–ó–∞–ø–∏—Å—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞, –≤—Ä–µ–º—è —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–Ω–æ');
                Components.showNotification('–ó–∞–ø–∏—Å—å –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞', 'warning');
                TelegramApp.hapticFeedback('success');

                // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
                this.loadBookings();
                if (typeof BookingSystem !== 'undefined') {
                    BookingSystem.loadAvailableSlots();
                }
            }
        });
    },

    // –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é
    completeBooking(bookingId) {
        TelegramApp.showConfirm('–û—Ç–º–µ—Ç–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é?', (confirmed) => {
            if (confirmed) {
                BookingStorage.update(bookingId, {
                    status: CONFIG.BOOKING_STATUS.COMPLETED,
                    completedAt: new Date().toISOString()
                });

                ConfigUtils.log('–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞:', bookingId);
                Components.showNotification('–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–∞—è', 'success');
                TelegramApp.hapticFeedback('success');

                this.loadBookings();
            }
        });
    },

    // –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    getStatistics() {
        const allBookings = BookingStorage.getAll();
        const allSlots = TimeSlotStorage.getAll();

        const stats = {
            totalBookings: allBookings.length,
            pendingBookings: allBookings.filter(b => b.status === CONFIG.BOOKING_STATUS.PENDING).length,
            confirmedBookings: allBookings.filter(b => b.status === CONFIG.BOOKING_STATUS.CONFIRMED).length,
            completedBookings: allBookings.filter(b => b.status === CONFIG.BOOKING_STATUS.COMPLETED).length,
            availableSlots: allSlots.filter(s => s.status === CONFIG.SLOT_STATUS.AVAILABLE).length,
            bookedSlots: allSlots.filter(s => s.status === CONFIG.SLOT_STATUS.BOOKED).length
        };

        return stats;
    },

    // –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    showStatistics() {
        const stats = this.getStatistics();

        return `
            <div class="admin-stats">
                <div class="stat-item">
                    <div class="stat-number">${stats.pendingBookings}</div>
                    <div class="stat-label">–û–∂–∏–¥–∞—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number">${stats.confirmedBookings}</div>
                    <div class="stat-label">–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number">${stats.completedBookings}</div>
                    <div class="stat-label">–ó–∞–≤–µ—Ä—à–µ–Ω–æ</div>
                </div>
                <div class="stat-item">
                    <div class="stat-number">${stats.availableSlots}</div>
                    <div class="stat-label">–°–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤</div>
                </div>
            </div>
        `;
    },

    // –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ
    exportData() {
        const allBookings = BookingStorage.getAll();
        const allSlots = TimeSlotStorage.getAll();

        const data = {
            bookings: allBookings,
            slots: allSlots,
            exportedAt: new Date().toISOString()
        };

        const dataStr = JSON.stringify(data, null, 2);
        const blob = new Blob([dataStr], { type: 'application/json' });
        const url = URL.createObjectURL(blob);

        const a = document.createElement('a');
        a.href = url;
        a.download = `tarot_bookings_${new Date().toISOString().split('T')[0]}.json`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        URL.revokeObjectURL(url);

        Components.showNotification('–î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã', 'success');
    }
};

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å
window.AdminPanel = AdminPanel;